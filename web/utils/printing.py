from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.units import mm
from reportlab.platypus import SimpleDocTemplate, Paragraph, Table, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT
from users.models import User
from users.serializers import UserSerializer
from tags.models import FrameTag
from video.models import Video, VideoProxyPath
from video.serializers import DetailVideoSerializer, VideoProxyPathSerializer
from tags.serializers import RelatedCommentSerializer
from rest_framework import serializers
from django.contrib.contenttypes.models import ContentType
from content.models import Movie, MovieSegment, Series, Episode, EpisodeSegment
import logging, sys

LOGGING = {
    'version': 1,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
        }
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO'
    }
}
logging.config.dictConfig(LOGGING)

class FrameTagSerializer(serializers.ModelSerializer):
    tagname = serializers.SerializerMethodField()
    category = serializers.SerializerMethodField()
    time = serializers.SerializerMethodField()
    stopTime = serializers.SerializerMethodField()
    user_comments = RelatedCommentSerializer(read_only=True, many=True)
    created_by = UserSerializer(read_only=True)
    content_type = serializers.SerializerMethodField(read_only=True)

    class Meta:
        model = FrameTag
        fields = ('id', 'tagname', 'category', 'video', 'frame_in', 'frame_out', 'comment', 'time', 'stopTime',
                  'words', 'is_approved', 'user_comments', 'created_by', 'content_type', 'is_cbfc')

    def get_time(self, obj):
        return obj.frame_in/obj.video.frame_rate

    def get_stopTime(self, obj):
        return obj.frame_out/obj.video.frame_rate

    def get_tagname(self, obj):
        if obj.tag:
            return obj.tag.name
        else:
            return None

    def get_category(self,obj):
        if obj.tag:
            return obj.tag.category.name
        else:
            return None

    def get_content_type(self, obj):
        frame_tag_ctype = ContentType.objects.get_for_model(FrameTag)
        return frame_tag_ctype.id


class SonyReport:
    def __init__(self,buffer, pagesize):
        self.buffer = buffer
        # self.data = data
        if pagesize == 'A4':
            self.pagesize = A4
        elif pagesize == 'Letter':
            self.pagesize = letter
        self.width, self.height = self.pagesize

    def print_frame_tags(self, video_id, user, request):
        buffer = self.buffer
        doc = SimpleDocTemplate(buffer, topMargin=72, bottonMargin=72, leftMargin=36, rightMargin=36,
                                pagesize=self.pagesize)

        # Our container for flowable objects
        elements = []

        # A large collection of sytlesheets made for us
        stylesheet = getSampleStyleSheet()
        stylesheet.add(ParagraphStyle(name='centered', alignment=TA_CENTER))

        styleN = ParagraphStyle(name='center', parent=stylesheet['BodyText'], alignment=TA_CENTER)

        # Draw things on the pdf, this is were the pdf gets generated

        # Report title
        elements.append(Table(data=[[Paragraph('Report Info', stylesheet['Heading2'])]], colWidths=[self.width-72]))
        elements.append(Spacer(1, 5 * mm, ))

        # Report info table
        width = (self.width - 72) / 4
        video = Video.objects.get(pk=video_id)
        video_data = DetailVideoSerializer(video)
        file_data = []
        file_data.append([Paragraph('Title', style=styleN), Paragraph(str(video_data.data['title']), styleN)])
        file_data.append([Paragraph('File Id',style=styleN), Paragraph(str(video_data.data['id']), styleN)])
        file_data.append([Paragraph('Uploaded On', style=styleN),
                          Paragraph(str(video_data.data['created_on']), styleN)])
        file_data.append([Paragraph('Generated by', style=styleN), Paragraph(str(user.get_full_name()), styleN)])
        style = [('GRID', (0, 0), (-1, -1), 0.75, colors.grey)]
        elements.append(Table(data=file_data, colWidths=[width] + [2*width], style=style, hAlign='LEFT'))
        elements.append(Spacer(1, 10 * mm, ))

        # Table header
        header_data = []
        header_data.append([Paragraph('Compliance Report', stylesheet["Heading2"])])
        elements.append(Table(data=header_data, colWidths=[self.width - 72]))
        elements.append(Spacer(1, 5 * mm, ))

        # Table inner cells
        data = []
        width = (self.width - 72) / 20
        frame_tags = FrameTag.objects.all().filter(video__pk=video_id)
        data.append(['Tag', 'Category', 'In', 'Out', 'Comments'])
        for i, tag in enumerate(frame_tags):
            frametag_serializer = FrameTagSerializer(tag, context={"request": request})
            tagname = Paragraph(frametag_serializer.data['tagname'], styleN)
            category = Paragraph(frametag_serializer.data['category'], styleN)
            frame_in = Paragraph(tag._time_in(), styleN)
            frame_out = Paragraph(tag._time_out(), styleN)
            comment = Paragraph(str(frametag_serializer.data['comment']), styleN)
            data.append([tagname, category, frame_in, frame_out, comment])
        style = [('GRID', (0, 0), (-1, -1), 0.75, colors.grey),
                 ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                 ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                 ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                 ('TEXTCOLOR', (0, 0), (-1, 0), colors.black)]
        elements.append(Table(data=data, colWidths= 2*[4*width]+2*[3*width]+[6*width], style=style))

        # build the doc from elements
        doc.build(elements)

        # get the value of BytesIO buffer and write it to the response
        pdf = buffer.getvalue()
        buffer.close()
        return pdf

    def print_report(self, video_id, username):
        buffer = self.buffer
        print(buffer)
        doc = SimpleDocTemplate(buffer, topMargin=72, bottonMargin=72, leftMargin=36, rightMargin=36,
                                pagesize=self.pagesize)

        # Our container for flowable objects
        elements = []

        # A large collection of sytlesheets made for us
        stylesheet = getSampleStyleSheet()
        stylesheet.add(ParagraphStyle(name='centered', alignment=TA_CENTER))

        styleN = ParagraphStyle(name='center', parent=stylesheet['BodyText'], alignment=TA_CENTER)

        # Draw things on the pdf, this is were the pdf gets generated

        # Report title
        elements.append(Table(data=[[Paragraph('SNP REPORT', stylesheet['Heading2'])]], colWidths=[self.width-72]))
        elements.append(Spacer(1, 5 * mm, ))

        # Report info table
        width = (self.width - 72) / 4
        video = Video.objects.get(pk=video_id)
        cast = ''
        cbfc = ''
        remarks = ''
        snp_status = ''
        channel = ''

        if MovieSegment.objects.filter(video=video):
            m = MovieSegment.objects.filter(video=video).first().movie
            cast = m.cast if m.cast else ''
            snp_status = m.status if m.status else ''
            remarks = m.remark if m.remark else ''
            cbfc = m.cbfc if m.cbfc else ''
            channel = m.channel.channel_name if m.channel else ''

        video_data = DetailVideoSerializer(video)
        file_data = []
        file_data.append([Paragraph('Title', style=styleN), Paragraph(str(video_data.data['title']), styleN)])
        file_data.append([Paragraph('Star Cast',style=styleN), Paragraph(cast, styleN)])
        file_data.append([Paragraph('Channel',style=styleN), Paragraph(channel, styleN)])
        file_data.append([Paragraph('Date', style=styleN),
                          Paragraph(str(video_data.data['created_on']), styleN)])
        file_data.append([Paragraph('CBFC Certification',style=styleN), Paragraph(cbfc, styleN)])
        file_data.append([Paragraph('Duration',style=styleN), Paragraph(str(video_data.data['duration']), styleN)])
        file_data.append([Paragraph('SNP Status',style=styleN), Paragraph(snp_status, styleN)])
        file_data.append([Paragraph('Remarks',style=styleN), Paragraph(remarks, styleN)])
        file_data.append([Paragraph('Generated by', style=styleN), Paragraph(str(username), styleN)])
        style = [('GRID', (0, 0), (-1, -1), 0.75, colors.grey)]
        elements.append(Table(data=file_data, colWidths=[width] + [3*width], style=style, hAlign='LEFT'))
        elements.append(Spacer(1, 10 * mm, ))

        # Table header
        header_data = []
        header_data.append([Paragraph('CBFC Edits', stylesheet["Heading2"])])
        elements.append(Table(data=header_data, colWidths=[self.width - 72]))
        elements.append(Spacer(1, 5 * mm, ))

        # Table inner cells
        data = []
        width = (self.width - 72) / 18
        frame_tags = FrameTag.objects.all().filter(video__pk=video_id, is_cbfc=True).order_by('frame_in')
        data.append(['Time In', 'Time Out', 'Description', 'Comments'])
        for i, tag in enumerate(frame_tags[0:100]):
            frametag_serializer = FrameTagSerializer(tag)
            tagname = Paragraph(frametag_serializer.data['tagname'], styleN)
            category = Paragraph(frametag_serializer.data['category'], styleN)
            frame_in = Paragraph(tag._time_in(), styleN)
            frame_out = Paragraph(tag._time_out(), styleN)
            comment = Paragraph(str(frametag_serializer.data['comment']), styleN)
            data.append([frame_in, frame_out, tagname, comment])
        style = [('GRID', (0, 0), (-1, -1), 0.75, colors.grey),
                 ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                 ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                 ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                 ('TEXTCOLOR', (0, 0), (-1, 0), colors.black)]
        elements.append(Table(data=data, colWidths= 3*[4*width]+[6*width], style=style))
        elements.append(Spacer(1, 10 * mm, ))

        # Table header
        header_data = []
        header_data.append([Paragraph('SNP Edits', stylesheet["Heading2"])])
        elements.append(Table(data=header_data, colWidths=[self.width - 72]))
        elements.append(Spacer(1, 5 * mm, ))

        # Table inner cells
        data = []
        width = (self.width - 72) / 18
        frame_tags = FrameTag.objects.all().filter(video__pk=video_id, is_cbfc=False).order_by('frame_in')
        data.append(['Time In', 'Time Out', 'Description', 'Comments'])
        for i, tag in enumerate(frame_tags[0:100]):
            frametag_serializer = FrameTagSerializer(tag)
            tagname = Paragraph(frametag_serializer.data['tagname'], styleN)
            category = Paragraph(frametag_serializer.data['category'], styleN)
            frame_in = Paragraph(tag._time_in(), styleN)
            frame_out = Paragraph(tag._time_out(), styleN)
            comment = Paragraph(str(frametag_serializer.data['comment']), styleN)
            data.append([frame_in, frame_out, tagname, comment])
        style = [('GRID', (0, 0), (-1, -1), 0.75, colors.grey),
                 ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                 ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                 ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                 ('TEXTCOLOR', (0, 0), (-1, 0), colors.black)]
        elements.append(Table(data=data, colWidths=3 * [4 * width] + [6 * width], style=style))

        # build the doc from elements
        doc.build(elements)

        return True


class PrintFrameTags:
    def __init__(self,buffer, pagesize):
        self.buffer = buffer
        if pagesize == 'A4':
            self.pagesize = A4
        elif pagesize == 'Letter':
            self.pagesize = letter
        self.width, self.height = self.pagesize

    def print_frame_tags(self, video_id, user, request):
        buffer = self.buffer
        doc = SimpleDocTemplate(buffer, topMargin=72, bottonMargin=72, leftMargin=36, rightMargin=36,
                                pagesize=self.pagesize)

        # Our container for flowable objects
        elements = []

        # A large collection of sytlesheets made for us
        stylesheet = getSampleStyleSheet()
        stylesheet.add(ParagraphStyle(name='centered', alignment=TA_CENTER))

        styleN = ParagraphStyle(name='center', parent=stylesheet['BodyText'], alignment=TA_CENTER)

        # Draw things on the pdf, this is were the pdf gets generated

        # Report title
        elements.append(Table(data=[[Paragraph('Report Info', stylesheet['Heading2'])]], colWidths=[self.width-72]))
        elements.append(Spacer(1, 5 * mm, ))

        # Report info table
        width = (self.width - 72) / 4
        video = Video.objects.get(pk=video_id)
        video_data = DetailVideoSerializer(video)
        file_data = []
        file_data.append([Paragraph('Title', style=styleN), Paragraph(str(video_data.data['title']), styleN)])
        file_data.append([Paragraph('File Id',style=styleN), Paragraph(str(video_data.data['id']), styleN)])
        file_data.append([Paragraph('Uploaded On', style=styleN),
                          Paragraph(str(video_data.data['created_on']), styleN)])
        file_data.append([Paragraph('Generated by', style=styleN), Paragraph(str(user.get_full_name()), styleN)])
        style = [('GRID', (0, 0), (-1, -1), 0.75, colors.grey)]
        elements.append(Table(data=file_data, colWidths=[width] + [2*width], style=style, hAlign='LEFT'))
        elements.append(Spacer(1, 10 * mm, ))

        # Table header
        header_data = []
        header_data.append([Paragraph('Compliance Report', stylesheet["Heading2"])])
        elements.append(Table(data=header_data, colWidths=[self.width - 72]))
        elements.append(Spacer(1, 5 * mm, ))

        # Table inner cells
        data = []
        width = (self.width - 72) / 20
        frame_tags = FrameTag.objects.all().filter(video__pk=video_id)
        data.append(['Tag', 'Category', 'In', 'Out', 'Comments'])
        for i, tag in enumerate(frame_tags):
            frametag_serializer = FrameTagSerializer(tag, context={"request": request})
            tagname = Paragraph(frametag_serializer.data['tagname'], styleN)
            category = Paragraph(frametag_serializer.data['category'], styleN)
            frame_in = Paragraph(tag._time_in(), styleN)
            frame_out = Paragraph(tag._time_out(), styleN)
            comment = Paragraph(str(frametag_serializer.data['comment']), styleN)
            data.append([tagname, category, frame_in, frame_out, comment])
        style = [('GRID', (0, 0), (-1, -1), 0.75, colors.grey),
                 ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                 ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
                 ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                 ('TEXTCOLOR', (0, 0), (-1, 0), colors.black)]
        elements.append(Table(data=data, colWidths= 2*[4*width]+2*[3*width]+[6*width], style=style))

        # build the doc from elements
        doc.build(elements)

        # get the value of BytesIO buffer and write it to the response
        pdf = buffer.getvalue()
        buffer.close()
        return pdf


class MyPrint:
    def __init__(self, buffer, pagesize):
        self.buffer = buffer
        if pagesize == 'A4':
            self.pagesize = A4
        elif pagesize == 'Letter':
            self.pagesize = letter
        self.width, self.height = self.pagesize

    def print_users(self):
        buffer = self.buffer
        doc = SimpleDocTemplate(buffer,
                                topMargin=72,
                                bottonMargin=72,
                                leftMargin=72,
                                rightMargin=72,
                                pagesize=self.pagesize)

        # Our container for flowable objects
        elements = []

        # A large collection of sytlesheets made for us
        stylesheet = getSampleStyleSheet()
        stylesheet.add(ParagraphStyle(name='centered', alignment=TA_CENTER))

        # Draw things on the pdf, this is were the pdf gets generated
        users = User.objects.all()
        elements.append(Paragraph('User Names', stylesheet['Heading1']))
        data = []
        width = (self.width-144)/3
        data.append(['Username','First Name', 'Email'])
        for i, user in enumerate(users):
            user_serializer = UserSerializer(user)
            data.append([user_serializer.data['username'], user_serializer.data['first_name'],
                         user_serializer.data['email']])
        style = [('GRID', (0,0), (-1,-1), 0.75, colors.grey),
                 ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                 ('BACKGROUND', (0,0), (-1,0), colors.grey),
                 ('TEXTCOLOR', (0,0),(-1,0), colors.black)]
        elements.append(Table(data=data, colWidths=3*[width], style=style))

        # build the doc from elements
        doc.build(elements)

        # get the value of BytesIO buffer and write it to the response
        pdf = buffer.getvalue()
        buffer.close()
        return pdf


class NX_report:
    def __init__(self, buffer, pagesize):
        self.buffer = buffer
        if pagesize == 'A4':
            self.pagesize = A4
        elif pagesize == 'Letter':
            self.pagesize = letter
        self.width, self.height = self.pagesize

    def ingest_status_report(self, from_date, to_date, format='csv'):
        buffer = self.buffer
        doc = SimpleDocTemplate(buffer,
                                topMargin=72,
                                bottonMargin=72,
                                leftMargin=72,
                                rightMargin=72,
                                pagesize=self.pagesize)

        # Our container for flowable objects
        elements = []

        # A large collection of sytlesheets made for us
        stylesheet = getSampleStyleSheet()
        stylesheet.add(ParagraphStyle(name='centered', alignment=TA_CENTER))

        # Draw things on the pdf, this is were the pdf gets generated
        # videoproxypaths = VideoProxyPath.objects.filter(created_on__date__gte = from_date, created_on__date__lte = to_date)
        elements.append(Paragraph('File Names', stylesheet['Heading1']))
        data = []
        logging.info(data)
        width = (self.width-144)/3
        data.append(['File name','File Path', 'Created on', 'Status'])
        a = [[x["title"], x["nbm"], x["created_on"]] for x in VideoProxyPath.objects.filter(created_on__date__gte = from_date, created_on__date__lte = to_date).values("title", "nbm", "created_on")]
        data = data + a
        # for i in videoproxypaths:
        #     i = VideoProxyPathSerializer(i)
        #     data.append([i.data['title'], i.data['nbm'], i.data['created_on'], i.data['nbm']])
        # logging.info(data)        
        style = [('GRID', (0,0), (-1,-1), 0.75, colors.grey),
                 ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                 ('BACKGROUND', (0,0), (-1,0), colors.grey),
                 ('TEXTCOLOR', (0,0),(-1,0), colors.black)]
        elements.append(Table(data=data, colWidths=5*[width], style=style))
        # build the doc from elements
        doc.build(elements)
        logging.info("here")
        # get the value of BytesIO buffer and write it to the response
        pdf = buffer.getvalue()       
        buffer.close()
        logging.info(pdf)
        return pdf
        # f = open('/tmp/report.pdf', 'w+b')
        # f.write(pdf)

